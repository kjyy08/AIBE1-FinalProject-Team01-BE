name: PR 빌드 테스트

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]
  release:
    types: [ published ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    name: 빌드 및 테스트

    steps:
      # GitHub repository 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # Java 17 설정
      - name: Java 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Gradle 권한 부여
      - name: Gradle 실행 권한 부여
        run: chmod +x ./gradlew

      # Gradle 캐시 설정 (빌드 속도 향상)
      - name: Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 의존성 다운로드 및 테스트 실행
      - name: 테스트 실행
        run: ./gradlew clean test

      # 테스트 리포트 업로드 (실패 시에도 결과 확인 가능)
      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/test/

      # 빌드 실행
      - name: 프로젝트 빌드
        run: ./gradlew bootJar

      # JAR 파일 실행 테스트
      - name: JAR 파일 검증
        run: |
          echo "빌드된 JAR 파일 확인 중..."
          ls -la build/libs/
          
          # JAR 파일이 제대로 생성되었는지 확인
          if [ -f build/libs/*.jar ]; then
            echo "✅ JAR 파일이 성공적으로 생성되었습니다"
          else
            echo "❌ JAR 파일 생성 실패"
            exit 1
          fi

      # 빌드 성공 알림
      - name: 빌드 성공 알림
        if: success()
        run: |
          echo "✅ 빌드 및 테스트가 성공적으로 완료되었습니다!"
          echo "🔍 PR 변경사항이 안전하게 빌드됩니다."

      # 빌드 실패 알림
      - name: 빌드 실패 알림
        if: failure()
        run: |
          echo "❌ 빌드 또는 테스트가 실패했습니다!"
          echo "🔧 PR을 머지하기 전에 문제를 해결해주세요."